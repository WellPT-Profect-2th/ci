name: Test CI Build Manually

on:
  workflow_dispatch:
    inputs:
      service:
        description: '서비스 이름 (예: user, product, gateway 등)'
        required: true
        default: 'gateway'
      sha:
        description: '이미지 태그용 SHA (생략 시 자동 생성)'
        required: false

jobs:
  init:
    runs-on: ubuntu-latest

    env:
      API_GATEWAY_ENV: ${{ vars.API_GATEWAY_ENV }}
      # API_GATEWAY_PORT: ${{ vars.API_GATEWAY_PORT }}
      # NEXT_SERVER: ${{ vars.NEXT_SERVER }}
      # USER_SERVER_ADDR: ${{ vars.USER_SERVER_ADDR }}
      # USER_SERVER_PORT: ${{ vars.USER_SERVER_PORT }}
      # AD_SERVER_ADDR: ${{ vars.AD_SERVER_ADDR }}
      # AD_SERVER_PORT: ${{ vars.AD_SERVER_PORT }}
      # PRODUCT_SERVER_ADDR: ${{ vars.PRODUCT_SERVER_ADDR }}
      # PRODUCT_SERVER_PORT: ${{ vars.PRODUCT_SERVER_PORT }}
      # REVIEW_SERVER_ADDR: ${{ vars.REVIEW_SERVER_ADDR }}
      # REVIEW_SERVER_PORT: ${{ vars.REVIEW_SERVER_PORT }}
      # CHATBOT_SERVER_ADDR: ${{ vars.CHATBOT_SERVER_ADDR }}
      # CHATBOT_SERVER_PORT: ${{ vars.CHATBOT_SERVER_PORT }}

    steps:
      - name: Checkout dev repo
        uses: actions/checkout@v3
        with:
          repository: WellPT-Profect-2th/dev
          token: ${{ secrets.DEV_REPO_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Export environment variables to .env and GitHub env
        run: |
          echo $API_GATEWAY_ENV >> $GITHUB_ENV
          echo $API_GATEWAY_ENV >> .env

      - name: Run tests / build
        run: |
          cd backend/${{ inputs.service }}
          ./gradlew test

            
            
      # - name: Set tag name
      #   id: set-tag
      #   run: |
      #     if [ -z "${{ github.event.inputs.sha }}" ]; then
      #       TAG=$(git rev-parse --short HEAD)
      #     else
      #       TAG="${{ github.event.inputs.sha }}"
      #     fi
      #     echo "tag=$TAG" >> $GITHUB_OUTPUT

      # - name: Run tests / build
      #   run: |
      #     SERVICE="${{ github.event.inputs.service }}"
      #     if [ "$SERVICE" == "frontend" ]; then
      #       cd frontend
      #       npm install
      #       npm run build
      #     else
      #       cd backend/$SERVICE
      #       if [ -f "gradlew" ]; then
      #         ./gradlew test
      #       elif [ -f "requirements.txt" ]; then
      #         pip install -r requirements.txt
      #         pytest
      #       else
      #         echo "No test runner found. Skipping test step."
      #       fi
      #     fi

      # - name: Build Docker image
      #   run: |
      #     SERVICE="${{ github.event.inputs.service }}"
      #     if [ "$SERVICE" == "frontend" ]; then
      #       docker build -t ghcr.io/wellpt-org/frontend-service:${{ steps.set-tag.outputs.tag }} ./frontend
      #     else
      #       docker build -t ghcr.io/wellpt-org/$SERVICE-service:${{ steps.set-tag.outputs.tag }} ./backend/$SERVICE
      #     fi

      # - name: Push Docker image
      #   run: |
      #     SERVICE="${{ github.event.inputs.service }}"
      #     if [ "$SERVICE" == "frontend" ]; then
      #       docker push ghcr.io/wellpt-org/frontend-service:${{ steps.set-tag.outputs.tag }}
      #     else
      #       docker push ghcr.io/wellpt-org/$SERVICE-service:${{ steps.set-tag.outputs.tag }}
      #     fi
